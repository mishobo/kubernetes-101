1. Prerequisites

a) An Ubuntu 22.04 system.
b) Minimum 2GB RAM or more
c) Minimum 2 CPU cores (or 2 vCPUs)
d) 20 GB of free disk space on /var (or more)

2. Update and Upgrade Ubuntu (all nodes)
    sudo apt update
    sudo apt upgrade

3: Disable Swap (all nodes)
- To enhance Kubernetes performance, disable swap and set essential kernel parameters. 
   Run the following commands on all nodes to disable all swaps:

    sudo swapoff -a
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

4: Add Kernel Parameters (all nodes)

sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter

Configure the critical kernel parameters for Kubernetes using the following:

sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

Then, reload the changes:

sudo sysctl --system

5: : Install Containerd Runtime (all nodes)

sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

Enable the Docker repository:

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

Update the package list and install containerd:

sudo apt update
sudo apt install -y containerd.io

Configure containerd to start using systemd as cgroup:

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

Restart and enable the containerd service:

sudo systemctl restart containerd
sudo systemctl enable containerd

6: Add Apt Repository for Kubernetes (all nodes)

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/kubernetes-xenial.gpg
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

7: Install Kubectl, Kubeadm, and Kubelet (all nodes)

sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

8:  Initialize Kubernetes Cluster with Kubeadm (master node)

sudo kubeadm init

After the initialization is complete make a note of the kubeadm join command for future reference.

Run the following commands on the master node:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Next, use kubectl commands to check the cluster and node status:

kubectl get nodes

9. Add Worker Nodes to the Cluster (worker nodes)

kubeadm join 146.190.135.86:6443 --token f1h95l.u4nkex9cw8d0g63w    --discovery-token-ca-cert-hash sha256:6d15f2a79bdb38d1666af50c85f060b9fadc73f13c932e0e2a9eeef08f51f91a

10. Install Kubernetes Network Plugin (master node)

To enable communication between pods in the cluster, you need a network plugin. 
Install the Calico network plugin with the following command from the master node:

> kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

11. Verify the cluster and test (master node)

> kubectl get pods -n kube-system
> kubectl get nodes

12. Deploy test application on cluster (master node)

> kubectl run nginx --image=nginx